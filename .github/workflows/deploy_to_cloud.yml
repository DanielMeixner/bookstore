name: Deploy to Cloud

on:
  deployment

env:
  GCP_SDK_VERSION: 312.0.0

jobs:
  deploy_details:
    name: Define Deployment Details

    runs-on: ubuntu-20.04

    outputs:
      ghcr_container: ${{ steps.deployment_data.outputs.container_image }}
      version: ${{ steps.deployment_data.outputs.version }}

    steps:
      - name: Extract Deployment Details and Report Deployment in Progress
        id: deployment_data
        uses: actions/github-script@v2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const run = process.env.GITHUB_RUN_ID
              , log_url = `https://github.com/${context.repo.owner}/${context.repo.repo}/actions/runs/${run}`
              ;

            const deployment = context.payload.deployment
              , environment = deployment.environment
              , deploymentPayload = JSON.parse(deployment.payload)
              , containerRegistryUrl = `${deploymentPayload.container_registry}`
              , containerImage = `${deploymentPayload.container_image}`
              , deploymentRef = deploymentPayload.ref
              , version = (containerImage.split(':')).pop()
              ;

            const webAppName = `${context.repo.repo}-${environment}`

            core.setOutput('container_registry_url', containerRegistryUrl);
            core.setOutput('container_image', containerImage);
            core.setOutput('webapp_name', webAppName);
            core.setOutput('deployment_github_ref', deploymentRef);
            core.setOutput('app_type', environment == 'prod' ? 'prod' : 'review');
            core.setOutput('environment', environment);
            core.setOutput('version', version);
            
            github.repos.createDeploymentStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              mediaType: {
                previews: ["flash-preview", "ant-man"]
              },
              deployment_id: context.payload.deployment.id,
              state: 'in_progress',
              description: 'Deployment from GitHub Actions started',
              target_url: log_url,
              log_url: log_url
            })


  copy_container:
    name: Copy Container to GCP
    runs-on: ubuntu-20.04

    needs: deploy_details

    outputs:
      gcp_container_name: ${{ steps.deploy_to_gcp.outputs.gcp_container_name }}

    env:
      GCR_CONTAINER_IMAGE: eu.gcr.io/${{ secrets.GCP_PROJECT_ID }}/${{ github.repository }}:${{ needs.deploy_details.outputs.version }}

    steps:
      - name: Sign in to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          username: ${{ github.actor }}
          password: ${{ secrets.OCTODEMOBOT_GHPR_TOKEN }}
          registry: ghcr.io
    
      - name: Pull GHCR Docker image
        id: container_publish
        run: |
          docker pull ${{ needs.deploy_details.outputs.ghcr_container }}
          docker tag ${{ needs.deploy_details.outputs.ghcr_container }} $GCR_CONTAINER_IMAGE

      - name: Sign in to Google Cloud Platform
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        with:
          version: ${{ env.GCP_SDK_VERSION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_TERRAFORM_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Deploy Container to Google Cloud Container Registry
        id: deploy_to_gcp
        run: |
          gcloud auth configure-docker
          docker push $GCR_CONTAINER_IMAGE

          echo "::set-output name=gcp_container_name::${{ github.repository }}"


  deploy:
    name: Terraform Deploy
    runs-on: ubuntu-20.04

    needs:
      - deploy_details
      - copy_container

    timeout-minutes: 5

    # Set common Terraform execution environment variables
    env:
      TF_VAR_ENVIRONMENT: ${{ github.event.deployment.environment }}
      TF_VAR_gcp_project: ${{ secrets.GCP_PROJECT_ID }}
      TF_VAR_container_image: ${{ needs.copy_container.outputs.gcp_container_name }}
      TF_VAR_container_tag: ${{ needs.deploy_details.outputs.version }}

      # Directory that contains Terraform HCL to run
      TERRAFORM_WORKING_DIRECTORY: ./terraform

    steps:
      - name: Checkout Sources
        uses: actions/checkout@v2

      - name: HashiCorp - Setup Terraform
        uses: hashicorp/setup-terraform@v1.2.0
        with:
          terraform_version: 0.13.4
          terraform_wrapper: true

      - name: Setup Terragrunt
        uses: autero1/action-terragrunt@v0.1.0
        with:
          terragrunt_version: 0.25.2

      - name: Sign in to Google Cloud Platform
        uses: GoogleCloudPlatform/github-actions/setup-gcloud@0.1.3
        with:
          version: ${{ env.GCP_SDK_VERSION }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
          service_account_key: ${{ secrets.GCP_TERRAFORM_SERVICE_ACCOUNT_KEY }}
          export_default_credentials: true

      - name: Terraform - init
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt init

      - name: Terraform - validate
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt validate

      - name: Terraform - plan
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt plan

      - name: Terraform - apply
        working-directory: ${{ env.TERRAFORM_WORKING_DIRECTORY }}
        run: terragrunt apply -auto-approve

      - name: Report Success
        uses: octokit/request-action@v1.x
        with:
          route: POST /repos/:owner/:repo/deployments/:deployment_id/statuses
          deployment_id: ${{ github.event.deployment.id }}
          environment: ${{ github.event.deployment.environment }}
          description: "Deployed in ${{ github.event.deployment.environment }}"
          state: "success"
          environment_url: "https://"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Report Failure
        if: failure()
        uses: octokit/request-action@v1.x
        with:
          route: POST /repos/:owner/:repo/deployments/:deployment_id/statuses
          deployment_id: ${{ github.event.deployment.id }}
          description: "Deploy failed for ${{ github.event.deployment.environment }}"
          environment: ${{ github.event.deployment.environment }}
          state: "failure"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
